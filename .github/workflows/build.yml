name: Build soda-sql

on: [ push ]

jobs:
  run-tests:
    name: Run Tests
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.7, 3.8 ]
        test-module: [ local, AthenaSuite, BigQuerySuite, RedshiftSuite, Snowflake ]
    env:
      TEST_MODULE: ${{ matrix.test-module }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      INCLUDED_BRANCHES: "main master"
      SODA_SNOWFLAKE_USERNAME: ${{ secrets.SODA_SNOWFLAKE_USERNAME }}
      SODA_SNOWFLAKE_PASSWORD: ${{ secrets.SODA_SNOWFLAKE_PASSWORD }}
      SODA_REDSHIFT_USERNAME: ${{ secrets.SODA_REDSHIFT_USERNAME }}
      SODA_REDSHIFT_PASSWORD: ${{ secrets.SODA_REDSHIFT_PASSWORD }}
      BIGQUERY_ACCOUNT_INFO_JSON: ${{ secrets.BIGQUERY_ACCOUNT_INFO_JSON }}
      SODA_ATHENA_ACCESS_KEY_ID: ${{ secrets.SODA_ATHENA_ACCESS_KEY_ID }}
      SODA_ATHENA_SECRET_ACCESS_KEY: ${{ secrets.SODA_ATHENA_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Run Tox
        run: |
          cat dev-requirements.in | grep tox | xargs pip install
          tox -- \
            --html=./reports/${{ steps.extract_branch.outputs.branch }}/${{ matrix.python-version }}/${{ matrix.test-module }}/tests/index.html \
            --cov=sodasql tests \
            --cov-report=html:./reports/${{ steps.extract_branch.outputs.branch }}/${{ matrix.python-version }}/${{ matrix.test-module }}/coverage \
            -k ${{ matrix.test-module }}
      - name: Copy Reports Index Page
        if: always()
        run: |
          cp ./reports/index.html ./reports/${{ steps.extract_branch.outputs.branch }}/${{ matrix.python-version }}/${{ matrix.test-module }}/index.html
      - name: Store Reports
        uses: actions/upload-artifact@v2
        with:
          name: soda-sql-tox-reports-${{ matrix.python-version }}
          path: ./reports
          retention-days: 5
      - name: Notify Slack on Failure
        if: failure()
        env:
          JOB_ID: ${{ github.job }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPORTS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip3 install -r .github/scripts/requirements.txt
          python3 .github/scripts/report_workflow_failure.py

  publish-pypi:
    name: Build & Publish Package
    if: contains(github.ref, 'refs/tags/')
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs: [run-tests]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup dependencies
        run: pip install --upgrade setuptools wheel twine
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Replace version
        run: sed -i -r "s|^(SODA_SQL_VERSION\s*=\s*).*|\1'${{ steps.get_version.outputs.VERSION }}'|" sodasql/__init__.py
      - name: Build package
        run: python3 setup.py sdist bdist_wheel
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  publish-docs:
    name: Deploy documentation
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    env:
      AWS_CLOUDFRONT_ID: E2OAY23FHJNRE7
      AWS_DOCS_BUCKET: soda-public-docs
      AWS_DOCS_PATH: /soda-sql
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DOCS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DOCS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_BUILD_DEFAULT_REGION }}
      - name: Publish docs
        run: aws s3 sync ./docs s3://${AWS_DOCS_BUCKET}${AWS_DOCS_PATH}
      - name: Invalidate cache
        run: aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_ID} --paths "${AWS_DOCS_PATH}" "${AWS_DOCS_PATH}/*"

  inform-success:
    name: Inform of success
    runs-on: ubuntu-20.04
    needs: [publish-pypi]
    steps:
      - uses: actions/checkout@v2
      - name: Notify Slack of success
        env:
          JOB_ID: ${{ github.job }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPORTS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INCLUDED_BRANCHES: "main master"
        run: |
          pip3 install -r .github/scripts/requirements.txt
          .github/scripts/report_workflow_success.py
